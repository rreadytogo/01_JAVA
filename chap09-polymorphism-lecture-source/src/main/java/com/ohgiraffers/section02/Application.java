package main.java.com.ohgiraffers.section02;

import java.security.spec.RSAOtherPrimeInfo;

public class Application {

    public static void main(String[] args) {

        /*
        추상클래스
        추상메소드를 1개이상 포함하는 클래스
        몸체가 없는 클래스.
        시그니처까지 존재하는.
        구현부가 없다.

        직접가져다 사용할 수 없다
        오버라이딩 한 자손 클래스 만든 후 인스턴스 만들 수 있다.

        = 사원증 (사원증 자체는 권한이 비어있다. 신입사원의 직책별 권한을 넣어주는 것이라고 ㅐㅇ각함)

        오버라이딩 강제적으로 해야만 사용할 ㅅ 있다?? 1014 ㅇㄴㅁㄻㄻㅇㄴㄹ

         */

        /*
        추상클래스와 추상 메소드
        추상메소드를 1개 이상 포함하는 클래스를 추상클래스라고 한다
        추상클래스는 선언부에  abstract 키워드를  명시해야함.
        인스턴스를 생성할 수 없다
        사용하려면 추상클래스를 상속받은 하위 클래스를 이용해서 인스턴스를 생성해야 한다

        이때 추상클래스는 상위 타입으로 사용될 수 잇으며, 다형성을 이용할 수 있다

        추상클래스에 작성한 메소드는 반드시 후손이 오버라이딩해서 작성해야하며
        후손 클래스의 메소드들이 메소들의 공통 인터페이스 역할을 수행할 수 있다
        추상클래스에 작성한 메소드를 호출하게 되면 후손 타입의 인스턴스가 가지는 메소드는
        다형성이 적용되어 동적바인딩에 의해 다양한 응답을 할 수 있게 된다

        추상클래스를 상속받아 구현할 때는 extends 키워드 사용하며
        자바에서는  extends로 클래스를 상속받을 시 하나의 부모클래스만 가질 수 있다 (단일상속)

        추상메소드란?
        메소드의 선언부만 있고 구현부가 없는 메소드를 추상메소드라고 한다
        추상메소드의 경우 반드시 abstract 키워드를 메소드 헤더에 작성해야 함
        ex) public abstract void method();

         */

        /*
        하나의 기능을 여러가지로 재정의해서 사용할 수 있도록.

        인터페이스
        전체가 추상메서드만으로 구성

         */

        //product 클래스는 인스턴스를 생성할 수 없다

//        Product product = new Product();

        /*
        이 메서드를 재정의해줘야만 사용할 수 있다는 것.
        추상메서드를 재정의하지 않았을 경우, 클래스를 만들 수 없다.
        추상클래스를 상속받은 클래스를 이용해서 객체를 만들 것.
         */

        Smartphone smartphone = new Smartphone();
        /*이렇게 객체를 만들어야.
        다형성. 부모로부터 상속받은 친구기때문에 스마트폰은
        스마트폰은 프로덕트도 가지고 있고, 스마트폰의 속성도 가지고 있다.
        */


        System.out.println(smartphone instanceof  Smartphone);
        System.out.println(smartphone instanceof Product);

        Product product = new Smartphone();
        //프로덕트에 new연산자를 사용하여 스마트폰을 넣어주게 되면, 스마트폰에 추상메서드가 저장되어있기 때문에
        //자동으로 업캐스팅이 가능하다.

        product.abstractMethod();
        //프로덕트의 추상메서드를 호출 -> 스마트폰에 정의해놓은 메서드가 동작되는 것을 볼 수 있다.
        // => 동적 바인딩. 넣은 자식의 자료형을 따라가는 것

        product.nonStaticMethod();
        //추상클래스가 가진 메서드 또한 호출할 수 있다.

        Product.staticMethod();
        //추상클래스도 하나의 클래스, 단일 @@? 밖에 지원하지 않는다.
        //추상메서드 같은 오버라이딩을 강제화시키기 위해 인터페이스 이용,
        //-> 상속받는 클래스 외 추가로 상속받을 수 있다

        //추상메서드 넣어놓고 구현책임을 강제화 시키지만,
        //다중상속 가능하게 학 ㅣ위해 인터페이스 사용한느 것

        //구현책임의 강제화, 한계점 정도만!



    }
}
